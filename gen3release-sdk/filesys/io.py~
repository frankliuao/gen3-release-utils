import shutil
from shutil import copytree, Error
import logging

LOGLEVEL = os.environ.get("LOGLEVEL", "DEBUG").upper()
logging.basicConfig(level=LOGLEVEL, format="%(asctime)-15s [%(levelname)s] %(message)s")
logging.getLogger(__name__)

def replace_on_path(version, json_block, path):
  if type(path) is list:
    # Hardcode index 0 for now as we only have a single sower job in the config
    # TODO: Iterate through sower jobs and replace versions accordingly
    replace_on_path(version, json_block[0], path[0])
  else:
    for sub_block, img_ref in path.items():
      logging.debug('replacing {} in {}'.format(img_ref, sub_block))
      json_block[sub_block][img_ref] = '{}:{}'.format(json_block[sub_block][img_ref].split(':')[0], version)
  return json_block

def recursive_copy(src, dst):
os.chdir(src)
for a_file in os.listdir():
  if a_file == 'README.md': continue
  logging.debug('copying file: {}'.format(a_file))
  if os.path.isdir(a_file):
    new_dst = os.path.join(dst, a_file)
    os.makedirs(new_dst, exist_ok=True)
    recursive_copy(os.path.abspath(a_file) + '/', new_dst)
  else:
    logging.debug('copying {} into {}'.format(a_file, dst))
    # files mapped in ENVIRONMENT_SPECIFIC_PARAMS need special treatment
    if a_file in ENVIRONMENT_SPECIFIC_PARAMS.keys():
      logging.debug('This file [{}] contains environment-specific \
rameters that need to be saved.'.format(a_file))
      # remember environment-specific information
      env_params = load_environment_params(dst, a_file)
      shutil.copy(src + a_file, dst)
      logging.debug('Stored parameters: {}'.format(env_params))
      # re-apply all the stored environment-specific params
      merge_json_file_with_stored_environment_params(dst, a_file, env_params)
    else:
      shutil.copy(src + a_file, dst)
